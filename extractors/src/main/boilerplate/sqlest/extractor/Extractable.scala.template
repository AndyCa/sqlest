/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 23.21 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-23.21
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.extractor

import scala.annotation.implicitNotFound

/**
 * Type class witnessing that a default extractor for type `A` exists
 */
trait Extractable[Row, -A] {
  type Out
  def extractor(a: A): Extractor[Row, _] { type SingleResult = Out }
}

object Extractable {
  @implicitNotFound("No default extractor for ${A} exists")
  type Aux[Row, A, B] = Extractable[Row, A] { type Out = B }

  implicit def extractorExtractable[Row, C1]: Extractable.Aux[Row, Extractor.Aux[Row, _, C1], C1] =
    new Extractable[Row, Extractor.Aux[Row, _, C1]] {
      type Out = C1
      def extractor(inExtractor: Extractor.Aux[Row, _, C1]) = inExtractor
    }

[2..22#  implicit def extractableTuple1[Row, [#C1#]]: Extractable.Aux[Row, Tuple1[[#Extractor[Row, C1]#]], Tuple1[[#C1#]]] =
    new Extractable[Row, Tuple1[[#Extractor[Row, C1]#]]] {
      type Out = Tuple1[[#C1#]]
      def extractor(extractorTuple: Tuple1[[#Extractor[Row, C1]#]]) = Tuple1Extractor([#extractorTuple._1#])
    }#

]
}
