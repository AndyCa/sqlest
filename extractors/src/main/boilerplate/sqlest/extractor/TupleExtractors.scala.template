/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.extractor

import sqlest.untyped._

case class Tuple1Extractor[A1](e1: Extractor[A1]) extends ProductExtractor[Tuple1[A1]] {
  type Accumulator = Tuple1[e1.Accumulator]

  val innerExtractors = List(e1)

  def initialize(row: Row) = Tuple1(e1.initialize(row))

  def accumulate(accumulator: Accumulator, row: Row) = Tuple1(e1.accumulate(accumulator._1, row))

  def emit(accumulator: Accumulator) = e1.emit(accumulator._1).map(Tuple1.apply)
}

[2..22#case class Tuple1Extractor[[#A1#]]([#e1: Extractor[A1]#]) extends ProductExtractor[Tuple1[[#A1#]]] {
  type Accumulator = Tuple1[[#e1.Accumulator#]]

  val innerExtractors = List([#e1#])

  def initialize(row: Row) =
    Tuple1([#e1.initialize(row)#])

  def accumulate(accumulator: Accumulator, row: Row) =
    Tuple1([#e1.accumulate(accumulator._1, row)#])

  def emit(accumulator: Accumulator) =
    for {
      [#emit1 <- e1.emit(accumulator._1)#
      ]
    } yield Tuple1([#emit1#])

  def map[B](func: ([#A1#]) => B) =
    MappedExtractor(this, func.tupled)
}#

]
