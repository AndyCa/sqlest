/*
 * Copyright 2014 JHC Systems Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sqlest.extractor

import org.joda.time.DateTime
import sqlest.ast._
import scala.language.experimental.macros
import sqlest.untyped.extractor.syntax.NamedExtractSyntax

trait LowPriorityExtractors {
  implicit def extractConstant[A](value: A) = ConstantExtractor(value)
  implicit def extractConstantSeq[A](valueSeq: Seq[A]) = valueSeq.map(ConstantExtractor(_))
}

case class ColumnExtractor[A](column: AliasedColumn[A]) extends CellExtractor[A] {
  def read(row: Row) =
    column.columnType match {
      case baseColumnType: BaseColumnType[A] => readRow(row, baseColumnType)
      case optionColumnType: OptionColumnType[_, _] => optionColumnType.read(readRow(row, optionColumnType.baseColumnType)).asInstanceOf[Option[A]]
      case mappedColumnType: MappedColumnType[_, _] => mappedColumnType.read(readRow(row, mappedColumnType.baseColumnType))
    }

  def readRow[B](row: Row, columnType: BaseColumnType[B]): Option[B] = columnType match {
    case IntColumnType => row.getValue[Int](column.columnAlias)
    case LongColumnType => row.getValue[Long](column.columnAlias)
    case DoubleColumnType => row.getValue[Double](column.columnAlias)
    case BigDecimalColumnType => row.getValue[BigDecimal](column.columnAlias)
    case BooleanColumnType => row.getValue[Boolean](column.columnAlias)
    case StringColumnType => row.getValue[String](column.columnAlias)
    case DateTimeColumnType => row.getValue[DateTime](column.columnAlias)
  }
}

trait Extractors extends LowPriorityExtractors {
  def extract[A]: Dynamic = macro NamedExtractSyntax.extractImpl[A]

  implicit def extractColumn[A](column: AliasedColumn[A]) =
    ColumnExtractor(column)

  implicit def extractSeq[A](columnSeq: Seq[AliasedColumn[A]]): Seq[Extractor[A]] =
    columnSeq.map(extractColumn)

  def extractColumnByName[A: ColumnType](name: String) =
    extractColumn(AliasColumn[A](null, name))

[2..22#  implicit def extractTuple1[[#A1#]](t: Tuple1[[#AliasedColumn[A1]#]]): Tuple1Extractor[[#A1#]] =
    new Tuple1Extractor[[#A1#]]([#t._1#])#

]

[2..22#  def extract[[#A1#]]([#e1: Extractor[A1]#]) =
    new Tuple1Extractor[[#A1#]]([#e1#])#

]
}
